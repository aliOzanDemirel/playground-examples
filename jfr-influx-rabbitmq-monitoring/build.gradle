import java.nio.charset.StandardCharsets

wrapper {
    gradleVersion = "7.2"
    distributionType = Wrapper.DistributionType.BIN
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {

    group "example.${rootProject.name}"
    version = "1.0"
    description = "Spring Boot-RabbitMQ-JFR Streaming-InfluxDB-Grafana example project"

    apply plugin: 'java'
    compileJava {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

// where final artifacts will be copied
def javaArtifactFolder = "artifact"

task buildClothingService(type: Copy) {
    group = "build"

    def jfrProjectName = "simple-jfr-agent"
    def clothingProjectName = "simple-clothing-service"

    dependsOn project(":$jfrProjectName").build
    dependsOn project(":$clothingProjectName").build

    from "${project(":$jfrProjectName").buildDir}/libs/jfr-monitoring-agent.jar",
            "${project(":$clothingProjectName").buildDir}/libs/clothing-service.jar"

    into javaArtifactFolder
}

task runClothingService(type: Exec) {
    group = "application"

    dependsOn buildClothingService
    workingDir javaArtifactFolder
    commandLine "java", "-Djfr.enabled.clothing=true", "-javaagent:jfr-monitoring-agent.jar", "-jar", "clothing-service.jar"
}

task buildBondIssuer(type: Copy) {
    group = "build"

    def jfrProjectName = "simple-jfr-agent"
    def bondProjectName = "simple-bond-issuer"

    dependsOn project(":$jfrProjectName").build
    dependsOn project(":$bondProjectName").build

    from "${project(":$jfrProjectName").buildDir}/libs/jfr-monitoring-agent.jar",
            "${project(":$bondProjectName").buildDir}/libs/bond-issuer.jar"

    into javaArtifactFolder
}

task runBondIssuer(type: Exec) {
    group = "application"

    dependsOn buildBondIssuer
    workingDir javaArtifactFolder
    commandLine "java", "-Djfr.enabled.bond=true", "-javaagent:jfr-monitoring-agent.jar", "-jar", "bond-issuer.jar"
}

tasks.register("generateLoad") {
    group = "application"

    // avoid executing this part of script when gradle configures project tasks in configuration phase
    doLast {
        (1..20).each {
            println "Triggering services, iteration: $it"
            triggerBondIssuer(it)
            triggerClothingService()
        }
        printTransactionStats()
        printInfluxQueryResults("bonds")
        printInfluxQueryResults("clothing_reviews")
    }
}

def triggerClothingService() {
    def body = "{\"description\":\"Some New Review\",\"rating\":5}"
    postRequest("http://localhost:8082/api/v1/clothing/3/reviews", body)
}

def triggerBondIssuer(index) {
    def amount = (index + 3) * 100
    def body = "{\"clientId\":$index,\"term\":6,\"amount\":\"$amount\"}"
    postRequest("http://localhost:8081/api/v1/bonds", body)
}

def printInfluxQueryResults(String measurementName) {
    def encodedQuery = URLEncoder.encode("SELECT * FROM \"$measurementName\" ORDER BY time DESC LIMIT 5", StandardCharsets.UTF_8)
    def conn = new URL("http://localhost:8086/query?pretty=true&db=grafana_exposed_metrics&q=$encodedQuery").openConnection()
    conn.setRequestMethod("GET")
    def prettyTextResponse = conn.inputStream.text
    println "InfluxDB data, $measurementName -> $prettyTextResponse"
}

def printTransactionStats() {
    def conn = new URL("http://localhost:8080/statistics").openConnection()
    conn.setRequestMethod("GET")
    def textResponse = conn.inputStream.text
    println "Stats from transaction-processor: $textResponse"
}

def postRequest(String url, String jsonBody) {
    def conn = new URL(url).openConnection()
    conn.setRequestMethod("POST")
    conn.setRequestProperty("Accept", "application/json")
    conn.setRequestProperty("Content-Type", "application/json")
    conn.setDoOutput(true)
    conn.outputStream.write(jsonBody.getBytes(StandardCharsets.UTF_8))
    conn.getResponseCode()
}