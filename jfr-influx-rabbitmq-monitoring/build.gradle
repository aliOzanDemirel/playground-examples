plugins {
    id "io.github.http-builder-ng.http-plugin" version "0.1.1"
}

wrapper {
    gradleVersion = "7.2"
    distributionType = Wrapper.DistributionType.BIN
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {

    group "example.${rootProject.name}"
    version = "1.0"
    description = "Spring Boot-RabbitMQ-JFR Streaming-InfluxDB-Grafana example project"

    apply plugin: 'java'
    compileJava {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
    }
}

// build clothing-service and jfr agent, copy artifacts to project root
task buildClothingService(type: Copy) {
    group = "clothing"

    def jfrProjectName = "simple-jfr-agent"
    def clothingProjectName = "simple-clothing-service"

    dependsOn project(":$jfrProjectName").build
    dependsOn project(":$clothingProjectName").build

    from "${project(":$jfrProjectName").buildDir}/libs/jfr-monitoring-agent.jar",
            "${project(":$clothingProjectName").buildDir}/libs/clothing-service.jar"

    into "build"
}

task runClothingService(type: Exec) {
    group = "clothing"

    dependsOn buildClothingService
    workingDir "/build"
    commandLine "java", "-Djfr.enabled.clothing=true", "-javaagent:jfr-monitoring-agent.jar", "-jar", "clothing-service.jar"
}

// build bond-issuer and jfr agent, copy artifacts to project root
task buildBondIssuer(type: Copy) {
    group = "bond"

    def jfrProjectName = "simple-jfr-agent"
    def bondProjectName = "simple-bond-issuer"

    dependsOn project(":$jfrProjectName").build
    dependsOn project(":$bondProjectName").build

    from "${project(":$jfrProjectName").buildDir}/libs/jfr-monitoring-agent.jar",
            "${project(":$bondProjectName").buildDir}/libs/bond-issuer.jar"

    into "build"
}

task runBondIssuer(type: Exec) {
    group = "bond"

    dependsOn buildBondIssuer
    workingDir "/build"
    commandLine "java", "-Djfr.enabled.bond=true", "-javaagent:jfr-monitoring-agent.jar", "-jar", "bond-issuer.jar"
}

task buildAndAssembleAll(type: Copy) {

    dependsOn subprojects.build

    def jfrProjectName = "simple-jfr-agent"
    def clothingProjectName = "simple-clothing-service"
    def bondProjectName = "simple-bond-issuer"

    from "${project(":$jfrProjectName").buildDir}/libs/jfr-monitoring-agent.jar",
            "${project(":$clothingProjectName").buildDir}/libs/clothing-service.jar",
            "${project(":$bondProjectName").buildDir}/libs/bond-issuer.jar"

    into "build"
}