plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'com.github.johnrengelman.shadow' version '5.1.0'

    // for gradle to build image (has other plugins for java and spring-boot)
    id 'com.bmuschko.docker-remote-api' version '7.1.0'
}

apply plugin: 'application'

mainClassName = 'app.MainKt'

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

dependencies {

    // ktor dependencies
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "io.ktor:ktor-client:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-gson:$ktor_version"

    // log4j2 dependencies
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: '2.12.1'

    // watch service to track file system changes
    implementation "com.github.vishna:watchservice-ktx:master-SNAPSHOT"

    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '4.8.0'
    testImplementation group: 'io.cucumber', name: 'cucumber-java8', version: '4.8.0'
}

// so that gradle:clean task removes the specified folders
clean {
    delete rootProject.buildDir
}

// generates fat JAR and puts it in the ./build/libs/ directory
shadowJar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    archiveFileName = 'app.jar'
}

task cleanStatic(type: Delete) {
    delete 'src/main/resources/static'
}
task copyFrontendToResources(type: Copy) {
    dependsOn 'cleanStatic'
    from fileTree('../frontend/build')
    into 'src/main/resources/static'
}
processResources { dependsOn 'copyFrontendToResources' }

docker {
    registryCredentials {
        url = "https://${project.findProperty('docker.remote.registry')}"
    }
    // UNIX default is: unix:///var/run/docker.sock
    // WINDOWS default is `tcp://127.0.0.1:2375` or `tcp://192.168.99.100:2376` with docker-machine
    // url = project.properties.getOrDefault('dockerHost', System.env.DOCKER_HOST)
    // certPath = project.properties.getOrDefault('dockerCertPath', System.env.DOCKER_CERT_PATH)
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/Dockerfile')
    from 'azul/zulu-openjdk-alpine:11.0.10-jre'
    exposePort 8080
    environmentVariable "JAVA_TOOL_OPTIONS", "-XX:MaxRAMPercentage=80 -Dkotlinx.coroutines.debug"
    copyFile 'libs/app.jar', '/app.jar'
    defaultCommand 'java', '-jar', '/app.jar'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    dependsOn shadowJar
    inputDir = project.buildDir
    images.add("disk-viewer:${project.version}")
}

task pushImage(type: DockerPushImage) {
    images.add("${project.findProperty('docker.remote.registry')}/disk-viewer:${project.version}")
}