---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  namespace: {{.Release.Namespace}}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "fullname" . }}
      app.kubernetes.io/instance: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "fullname" . }}
        app.kubernetes.io/instance: {{ template "fullname" . }}
    spec:
      securityContext:
        fsGroupChangePolicy: Always
        sysctls: [ ]
        supplementalGroups: [ ]
        fsGroup: 1001
      containers:
        - name: mysql
          image: mysql:8.3
          ports:
            - containerPort: {{ .Values.database.port }}
              name: mysql
          env:
            - name: MYSQL_DATABASE
              value: {{ .Values.database.name }}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-secrets" (include "fullname" .) }}
                  key: rootPassword
          securityContext:
            seLinuxOptions: { }
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            seccompProfile:
              type: "RuntimeDefault"
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: {{ .Values.container.requestCpu }}
              memory: {{ .Values.container.requestMemory }}
            limits:
              memory: {{ .Values.container.requestMemory }}
          {{- if .Values.readinessProbeEnabled }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          {{- end }}
          volumeMounts:
            {{- if eq .Values.storage.usePersistentVolume true }}
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
            {{- else }}
            - name: empty-dir
              mountPath: /var/lib/mysql
            {{- end }}
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d # NOTE: can use start script instead
            - name: empty-dir
              mountPath: /var/run/mysqld # mysqld.sock.lock. file is used under this dir
            - name: empty-dir
              mountPath: /tmp
      volumes:
        {{- if eq .Values.storage.usePersistentVolume true }}
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: {{ template "fullname" . }}-pv-claim
        {{- end }}
        - name: init-scripts
          configMap:
            name: {{ printf "%s-init-scripts" (include "fullname" .) }}
        - name: empty-dir
          emptyDir: { }

